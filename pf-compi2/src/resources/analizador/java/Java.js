/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[16,17],$V1=[2,13],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[2,5,14,15,16,17],$V6=[52,53,54,55,56,63],$V7=[2,59],$V8=[1,24],$V9=[1,23],$Va=[1,25],$Vb=[11,16,18,52,53,54,55,56,61,63],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,46],$Vj=[18,68],$Vk=[21,47],$Vl=[1,54],$Vm=[21,47,50],$Vn=[2,39],$Vo=[1,55],$Vp=[2,124],$Vq=[1,67],$Vr=[1,68],$Vs=[1,73],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,75],$Vy=[52,53,54,55,56],$Vz=[1,90],$VA=[1,91],$VB=[1,97],$VC=[1,98],$VD=[1,95],$VE=[1,99],$VF=[1,93],$VG=[1,100],$VH=[2,167],$VI=[21,41,109],$VJ=[2,127],$VK=[1,110],$VL=[1,111],$VM=[21,41,109,118,119],$VN=[2,132],$VO=[1,114],$VP=[21,41,109,118,119,123],$VQ=[2,136],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[21,41,109,118,119,123,127,128,129,130,131,132],$VY=[2,145],$VZ=[1,125],$V_=[1,126],$V$=[21,41,109,118,119,123,127,128,129,130,131,132,136,137],$V01=[2,150],$V11=[1,129],$V21=[1,130],$V31=[1,131],$V41=[21,41,109,118,119,123,127,128,129,130,131,132,136,137,141,142,143],$V51=[2,156],$V61=[1,134],$V71=[1,136],$V81=[21,41,109,118,119,123,127,128,129,130,131,132,136,137,141,142,143,147],$V91=[11,16,18,34,36,52,53,54,55,56,61,63,75,81,84,87,91,99,103,110,113],$Va1=[2,20],$Vb1=[11,16,18,34,36,52,53,54,55,56,61,75,84,87,91,99,103,110,113],$Vc1=[1,147],$Vd1=[1,145],$Ve1=[1,148],$Vf1=[1,149],$Vg1=[18,40,148,149,150,151,152,153],$Vh1=[11,103,110,113],$Vi1=[21,41],$Vj1=[11,16,18,34,36,52,53,54,55,56,61,75,81,84,87,91,99,103,110,113],$Vk1=[1,189],$Vl1=[1,188],$Vm1=[1,211],$Vn1=[11,110],$Vo1=[1,243],$Vp1=[2,114],$Vq1=[11,103,110];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicial":3,"a1":4,"EOF":5,"err":6,"declaracion_clase":7,"declaracion_clase_p":8,"LLAVE_A":9,"instrucciones_clase":10,"LLAVE_C":11,"import_clase":12,"etiquetas_clase":13,"PR_GETTER":14,"PR_SETTER":15,"PR_PUBLIC":16,"PR_CLASS":17,"ID":18,"instrucciones_clase_p":19,"declaracion_variable":20,"PUNTO_Y_COMA":21,"declaracion_metodo":22,"instrucciones_metodo":23,"instrucciones_metodo_p":24,"asignacion_variable":25,"instruccion_return":26,"instruccion_if":27,"ciclo_for":28,"ciclo_while":29,"ciclo_do_while":30,"instruccion_switch":31,"instruccion_print":32,"instruccion_println":33,"PR_RETURN":34,"expresion_multiple":35,"PR_SYSTEM":36,"PUNTO":37,"PR_OUT":38,"PR_PRINT":39,"PARENT_A":40,"PARENT_C":41,"PR_PRINTLN":42,"visibilidad":43,"tipo":44,"ids":45,"asignacion":46,"ASIGNACION":47,"PR_NEW":48,"ids_p":49,"COMA":50,"ids_object":51,"PR_INT":52,"PR_DOUBLE":53,"PR_CHAR":54,"PR_STRING":55,"PR_BOOLEAN":56,"asignacion_object":57,"inc_dec":58,"INCREMENTO":59,"DECREMENTO":60,"PR_PRIVATE":61,"declaracion_metodo_p":62,"PR_VOID":63,"declaracion_metodo_p_a":64,"llill":65,"parametros_b_p":66,"metodo_principal":67,"PR_MAIN":68,"parametros":69,"parametros_p":70,"instruccion_if_b_p":71,"fin_if":72,"instruccion_if_p":73,"inicio_if":74,"PR_IF":75,"instrucciones_else_if":76,"instruccion_else":77,"instruccion_else_if":78,"instruccion_else_if_b_p":79,"fin_else_if":80,"PR_ELSE":81,"inicio_else":82,"fin_else":83,"PR_DO":84,"inicio_do":85,"fin_do":86,"PR_WHILE":87,"parte_while":88,"fin_while":89,"inicio_while":90,"PR_FOR":91,"inicio_for":92,"ciclo_for_p":93,"fin_for":94,"primera_exp":95,"accion_posterior":96,"inicio_switch":97,"instruccion_switch_c_p":98,"PR_SWITCH":99,"instruccion_switch_t_p":100,"instruccion_switch_default":101,"instruccion_switch_b_p":102,"PR_CASE":103,"inicio_cas_sw":104,"case_p":105,"case_ins":106,"instruccion_break":107,"fin_cas_sw":108,"DOS_PUNTOS":109,"PR_DEFAULT":110,"inicio_def_sw":111,"fin_def_sw":112,"PR_BREAK":113,"a3":114,"b3":115,"a3p":116,"a3bp":117,"OR":118,"XOR":119,"c3":120,"b3p":121,"b3bp":122,"AND":123,"d3":124,"c3p":125,"c3bp":126,"IGUAL":127,"NO_IGUAL":128,"MAYOR":129,"MENOR":130,"MAYOR_IGUAL":131,"MENOR_IGUAL":132,"e3":133,"d3p":134,"d3bp":135,"SUMA":136,"RESTA":137,"f3":138,"e3p":139,"e3bp":140,"MULTIPLICACION":141,"DIVISION":142,"MODULO":143,"g3":144,"f3p":145,"f3bp":146,"POTENCIA":147,"NOT":148,"BOOLEAN":149,"INT":150,"DOUBLE":151,"CHAR":152,"STRING":153,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"LLAVE_A",11:"LLAVE_C",14:"PR_GETTER",15:"PR_SETTER",16:"PR_PUBLIC",17:"PR_CLASS",18:"ID",21:"PUNTO_Y_COMA",34:"PR_RETURN",36:"PR_SYSTEM",37:"PUNTO",38:"PR_OUT",39:"PR_PRINT",40:"PARENT_A",41:"PARENT_C",42:"PR_PRINTLN",47:"ASIGNACION",48:"PR_NEW",50:"COMA",52:"PR_INT",53:"PR_DOUBLE",54:"PR_CHAR",55:"PR_STRING",56:"PR_BOOLEAN",59:"INCREMENTO",60:"DECREMENTO",61:"PR_PRIVATE",63:"PR_VOID",68:"PR_MAIN",75:"PR_IF",81:"PR_ELSE",84:"PR_DO",87:"PR_WHILE",91:"PR_FOR",99:"PR_SWITCH",103:"PR_CASE",109:"DOS_PUNTOS",110:"PR_DEFAULT",113:"PR_BREAK",118:"OR",119:"XOR",123:"AND",127:"IGUAL",128:"NO_IGUAL",129:"MAYOR",130:"MENOR",131:"MAYOR_IGUAL",132:"MENOR_IGUAL",136:"SUMA",137:"RESTA",141:"MULTIPLICACION",142:"DIVISION",143:"MODULO",147:"POTENCIA",148:"NOT",149:"BOOLEAN",150:"INT",151:"DOUBLE",152:"CHAR",153:"STRING"},
productions_: [0,[3,2],[6,1],[4,1],[4,2],[7,4],[7,3],[7,1],[12,0],[13,1],[13,1],[13,2],[13,2],[13,0],[8,4],[8,3],[10,1],[10,2],[19,2],[19,1],[23,1],[23,2],[24,2],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[26,3],[32,9],[33,9],[20,4],[20,8],[45,1],[45,3],[49,1],[51,1],[44,1],[44,1],[44,1],[44,1],[44,1],[46,0],[46,2],[46,7],[25,3],[25,2],[25,6],[57,1],[57,5],[57,6],[58,1],[58,1],[43,1],[43,1],[43,0],[22,3],[22,3],[62,2],[64,4],[64,1],[67,3],[69,1],[69,3],[70,2],[66,1],[66,0],[65,3],[65,2],[27,4],[74,0],[72,0],[71,5],[73,1],[73,2],[73,1],[73,0],[76,1],[76,2],[78,3],[80,0],[79,5],[77,4],[82,0],[83,0],[30,9],[85,0],[86,0],[29,3],[88,5],[90,0],[89,0],[28,7],[92,0],[94,0],[93,5],[95,1],[95,1],[96,1],[96,0],[31,2],[97,4],[98,2],[98,3],[98,3],[98,4],[100,1],[100,2],[102,6],[105,1],[106,1],[106,2],[104,0],[108,0],[101,4],[111,0],[112,0],[107,2],[107,0],[35,1],[35,0],[114,2],[116,3],[116,0],[117,1],[117,1],[115,2],[121,3],[121,0],[122,1],[120,2],[125,3],[125,0],[126,1],[126,1],[126,1],[126,1],[126,1],[126,1],[124,2],[134,3],[134,0],[135,1],[135,1],[133,2],[139,3],[139,0],[140,1],[140,1],[140,1],[138,2],[145,3],[145,0],[146,1],[144,3],[144,2],[144,2],[144,4],[144,1],[144,1],[144,1],[144,1],[144,1],[144,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        for(const simbolo in getAmbitoActual()){
                            console.log("Id: "+getAmbitoActual()[simbolo].id);
                            console.log("Tipo: "+getAmbitoActual()[simbolo].tipo);
                            console.log("Ambito: "+getAmbitoActual()[simbolo].ambito);
                            console.log("Visibilidad: "+getAmbitoActual()[simbolo].visibilidad);
                            console.log("Rol: "+getAmbitoActual()[simbolo].rol);
                        }
                    
break;
case 2:

            //error
            let ErrorLS = new Object();
            ErrorLS.lexema = yytext;
            ErrorLS.linea = this._$.first_line;
            ErrorLS.columna = this._$.first_column;
            ErrorLS.tipo = 'Sint√°ctico';
            ErrorLS.descripcion = '';
            errores.push(ErrorLS);
    
break;
case 5: case 6:

        //-w-ambitoActual.pop();
        cerrarAmbito();
        yy.PILA_INS.sacar();
    
break;
case 14: case 15:

            if(existeClase($$[$0],yy)){
                errorSemantico("La clase "+$$[$0]+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
            }
            agregarSimbolo($$[$0],"","",yy.PUBLIC,yy.CLASE);
            nuevoAmbito();
            yy.PILA_INS.apilar(yy.nuevaClase($$[$0].toString()));
        
break;
case 18: case 22: case 23:
 yy.PILA_INS.apilar($$[$0-1]); 
break;
case 24:
  yy.PILA_INS.apilar($$[$0]);  
break;
case 32:

        this.$ = yy.nuevaReturn($$[$0-2].toString(),$$[$0-1].instruccion);

    
break;
case 33:

        //this.$ = yy.nuevaPrint($$[$0-4].toString(),$$[$0-2].instruccion);
         yy.PILA_INS.apilar(yy.nuevaPrint($$[$0-4].toString(),$$[$0-2].instruccion));
    
break;
case 34:

        //this.$ = yy.nuevaPrint($$[$0-4].toString(),$$[$0-2].instruccion);
        yy.PILA_INS.apilar(yy.nuevaPrint($$[$0-4].toString(),$$[$0-2].instruccion));
    
break;
case 35:

            if($$[$0-3] != yy.DEFAULT){
                if(!ambitoClase){
                    errorSemantico("Ilegal inicio de expresi√≥n: "+$$[$0-3]+".",this._$.first_line,this._$.first_column);
                }
            }

              //declaracion y asignacion
            if($$[$0]==null || $$[$0].tipoResultado == undefined || $$[$0-2] == $$[$0].tipoResultado ){
                while(ids.length>0){
                   let id = ids.pop();
                  if($$[$0].tipoResultado == undefined) {
                    if(existeSimbolo(id,yy.VARIABLE)){
                        errorSemantico("La variable "+id+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
                    }else{
                     this.$ = yy.nuevaDeclaracion(id,yy.nuevaOperacion(null,null,yy.ID,$$[$0].toString()));
                     agregarSimbolo(id,$$[$0-2],"",$$[$0-3],yy.VARIABLE);
                    }
                  } else {
                    //asignacion de tipo correcta

                    //-w-if(existeSimbolo(id,ambitoActual.at(-1),yy.VARIABLE)){
                    if(existeSimbolo(id,yy.VARIABLE)){
                        errorSemantico("La variable "+id+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
                    }else{
                        if($$[$0] != null){
                            //simboloVariable.valor = $$[$0].valor;
                            this.$ = yy.nuevaDeclaracion(id,$$[$0].instruccion);
                        }
                        //-w-agregarSimbolo(id,$$[$0-2],ambitoActual.at(-1),$$[$0-3],yy.VARIABLE);
                        agregarSimbolo(id,$$[$0-2],"",$$[$0-3],yy.VARIABLE);
                    }
                  }
                }
            }else{
                errorSemantico("Tipo de dato requerido : "+$$[$0-2]+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }


        
break;
case 36:

            if($$[$0-6] != yy.DEFAULT){
                if(!ambitoClase){
                  errorSemantico("Ilegal inicio de expresi√≥n: "+$$[$0-7]+".",this._$.first_line,this._$.first_column);
                }
            }
            //let id = ids.pop();
            if(existeSimbolo($$[$0-6],yy.OBJECT)){
                errorSemantico("La variable "+$$[$0-6]+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
            }else {
              if($$[$0-1] != undefined) {
                  yy.PILA_INS.apilar(yy.nuevaDeclaracion("param", $$[$0-1].instruccion));
              }
              this.$ = yy.nuevaDeclaracion($$[$0-6],yy.nuevaOperacion(null,null,yy.ID,$$[$0-3].toString()));
              agregarSimbolo($$[$0-6],$$[$0-7],"",yy.DEFAULT,yy.OBJECT);

            }
            //declaracion y asignacion
            /*
            operacion = new Object();
                    let sim_id_a = validarVariable($$[$0-7],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el s√≠mbolo "+$$[$0-7]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.ID,$$[$0-7].toString());
                    this.$ = operacion;
            */
        
break;
case 39:
 ids.push($$[$0]); 
break;
case 40: case 47: case 100: case 101: case 102: case 123:
 this.$ = $$[$0]; 
break;
case 41:
 this.$ = yy.INT; 
break;
case 42:
 this.$ = yy.DOUBLE; 
break;
case 43:
 this.$ = yy.CHAR; 
break;
case 44:
 this.$ = yy.STRING; 
break;
case 45:
 this.$ = yy.BOOLEAN; 
break;
case 46: case 103: case 127: case 132: case 136: case 145: case 150: case 156:
 this.$ = null; 
break;
case 48:
 this.$ = $$[$0-5] + '_' + $$[$0-3]; 
break;
case 49:

        //validando id
        let simId = validarVariable($$[$0-2],yy);
        if(simId==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0-2]+" .",this._$.first_line,this._$.first_column);
        }else{
          if($$[$0].tipoResultado == undefined) {
              this.$ = yy.nuevaAsignacion($$[$0-2].toString(),yy.nuevaOperacion(null,null,yy.ID,$$[$0].toString()));
          } else {
            if(simId.tipo == $$[$0].tipoResultado){
                //asignacion exitosa;
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                this.$ = yy.nuevaAsignacion($$[$0-2].toString(),$$[$0].instruccion);
            }else{
                errorSemantico("Tipo de dato requerido : "+simId.tipo+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
          }

        }
    
break;
case 50:

        let simId_a = validarVariable($$[$0-1],yy);
        if(simId_a==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0-1]+" .",this._$.first_line,this._$.first_column);
        }else{
            if(simId_a.tipo == yy.INT || simId_a.tipo == yy.DOUBLE){
                //asignacion exitosa;
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                this.$ = yy.nuevoIncDec($$[$0-1].toString(),$$[$0]);
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.DOUBLE+" . Obtenido: "+simId_a.tipo+" .",this._$.first_line,this._$.first_column);
            }
        }
    
break;
case 51:

        if($$[$0-1] != undefined) {
            yy.PILA_INS.apilar(yy.nuevaDeclaracion("param", $$[$0-1].instruccion));
        }
        let temps = $$[$0-5] + '_' + $$[$0-3];
        this.$ = yy.nuevaAsignacion("",yy.nuevaOperacion(null,null,yy.ID,temps));
      
break;
case 52:
 this.$ = $$[$0];  
break;
case 53:

        if($$[$0-1] != undefined) {
            yy.PILA_INS.apilar(yy.nuevaDeclaracion("param", $$[$0-1].instruccion));
        }

         this.$ = $$[$0-3];
      
break;
case 54:

        if($$[$0-1] != undefined) {
            yy.PILA_INS.apilar(yy.nuevaDeclaracion("param", $$[$0-1].instruccion));
        }
        this.$ = $$[$0-5] + '_' + $$[$0-3];
      
break;
case 55: case 146:
 this.$ = yy.SUMA; 
break;
case 56: case 147:
 this.$ = yy.RESTA; 
break;
case 57:
 this.$ = yy.PUBLIC; 
break;
case 58:
 this.$ = yy.PRIVATE; 
break;
case 59:
 this.$ = yy.DEFAULT; 
break;
case 60:

        let ultimoMetodoDeclarado = obtenerUltimoMetodo(yy);
        ultimoMetodoDeclarado.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado.tipo = $$[$0-1];
    
break;
case 61:

        let ultimoMetodoDeclarado1 = obtenerUltimoMetodo(yy);
        ultimoMetodoDeclarado1.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado1.tipo = $$[$0-1];
    
break;
case 62:

        //-w-ambitoActual.pop();
        cerrarAmbito();
        ambitoClase = true;
        yy.PILA_INS.sacar();
    
break;
case 63:

        //-w-if(existeSimbolo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,ambitoActual.at(-1),yy.METODO)){
        if(existeSimbolo($$[$0-3]+cadParametros,yy.METODO)){
            //-w-errorSemantico("El m√©todo "+$$[$0-3]+cadParametros+" ya ha sido declarado en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
            errorSemantico("El m√©todo "+$$[$0-3]+cadParametros+" ya ha sido declarado.",this._$.first_line,this._$.first_column);
        }
        //-w-agregarSimbolo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,"",ambitoActual.at(-1),"",yy.METODO);
        agregarSimbolo($$[$0-3]+cadParametros,"","","",yy.METODO);
        nuevoAmbito();

        yy.PILA_INS.apilar(yy.nuevoMetodo($$[$0-3]+cadParametros));

        //-w-ambitoActual.push(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros);
        ambitoClase = false;
        cadParametros = "";
        pushSimbolosParametros();
    
break;
case 65:

        //nuevoAmbito();
        //yy.PILA_INS.apilar(yy.nuevoMetodo($$[$0-1].toString()));

        if(existeSimbolo($$[$0-2]+cadParametros,yy.METODO)){
            //-w-errorSemantico("El m√©todo "+$$[$0-2]+cadParametros+" ya ha sido declarado en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
            errorSemantico("El m√©todo "+$$[$0-2]+cadParametros+" ya ha sido declarado.",this._$.first_line,this._$.first_column);
        }
        //-w-agregarSimbolo(ambitoActual.at(-1)+"_"+$$[$0-2]+cadParametros,"",ambitoActual.at(-1),"",yy.METODO);
        agregarSimbolo($$[$0-2]+cadParametros,"","","",yy.METODO);
        nuevoAmbito();

        yy.PILA_INS.apilar(yy.nuevoMetodo($$[$0-2]+cadParametros));

        //-w-ambitoActual.push(ambitoActual.at(-1)+"_"+$$[$0-2]+cadParametros);
        ambitoClase = false;
        cadParametros = "";
        pushSimbolosParametros();
    
break;
case 68:

        cadParametros+="_"+$$[$0-1];
        if(simbolosParametros.some(w => w.id === $$[$0])){
            errorSemantico("La variable "+$$[$0]+" ya ha sido definida como par√°metro.",this._$.first_line,this._$.first_column);
        }else{
            agregarSimboloParametro($$[$0],$$[$0-1],yy.PRIVATE,yy.PARAMETRO);
        }
    
break;
case 73: case 104:

        yy.PILA_INS.sacar();
    
break;
case 74: case 94: case 97: case 116:
 nuevoAmbito(); 
break;
case 75: case 91:
 cerrarAmbito(); 
break;
case 76:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.apilar(yy.nuevoIf($$[$0-1].instruccion));
        }catch(exception){
        }
    
break;
case 84: case 88: case 95: case 98: case 117: case 120:

        cerrarAmbito();
        yy.PILA_INS.sacar();
    
break;
case 85:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoElseIf($$[$0-1].instruccion));
        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }
    
break;
case 87:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoElse());
    
break;
case 89:

        try{
            if($$[$0].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.sacarDoWhile($$[$0-2].instruccion);
        }catch(exception){
        }
    
break;
case 90:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoDoWhile(null));
    
break;
case 93:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.apilar(yy.nuevoWhile($$[$0-1].instruccion));
        }catch(exception){
        }
    
break;
case 96: case 112:


    
break;
case 99:

        try{
            if($$[$0-2].tipoResultado!=yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.apilar(yy.nuevoFor($$[$0-4],$$[$0-2].instruccion,$$[$0]));
        }catch(e){
        }
    
break;
case 105:

        if($$[$0-1].tipoResultado == yy.DOUBLE || $$[$0-1].tipoResultado == yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.CHAR+","+yy.STRING+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
        tipoDatoSwtich = $$[$0-1].tipoResultado;
        yy.PILA_INS.apilar(yy.nuevoSwitch($$[$0-1].instruccion));
    
break;
case 113:

        if($$[$0].tipoResultado != tipoDatoSwtich){
            errorSemantico("Tipo de dato requerido : "+tipoDatoSwtich+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }

        yy.PILA_INS.apilar(yy.nuevoCase($$[$0].instruccion));
    
break;
case 119:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoDefault());
    
break;
case 125: case 130: case 134: case 143: case 148: case 154:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
            
break;
case 126: case 131: case 135: case 144: case 149: case 155:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);
                    
break;
case 128:
 this.$ = yy.OR; 
break;
case 129:
 this.$ = yy.XOR; 
break;
case 133:
 this.$ = yy.AND; 
break;
case 137:
 this.$ = yy.IGUAL; 
break;
case 138:
 this.$ = yy.NO_IGUAL; 
break;
case 139:
 this.$ = yy.MAYOR; 
break;
case 140:
 this.$ = yy.MENOR; 
break;
case 141:
 this.$ = yy.MAYOR_IGUAL; 
break;
case 142:
 this.$ = yy.MENOR_IGUAL; 
break;
case 151:
 this.$ = yy.MULTIPLICACION; 
break;
case 152:
 this.$ = yy.DIVISION; 
break;
case 153:
 this.$ = yy.MODULO; 
break;
case 157:
 this.$ = yy.POTENCIA; 
break;
case 158:
 this.$ = $$[$0-1]; 
break;
case 159:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 160:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;
    
break;
case 161:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }
    
break;
case 162:

                    operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.INT,$$[$0].toString());
                    this.$ = operacion;
                
break;
case 163:

                    operacion = new Object();
                    operacion.tipoResultado = yy.DOUBLE;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.DOUBLE,$$[$0].toString());
                    this.$ = operacion;
                
break;
case 164:

                    operacion = new Object();
                    operacion.tipoResultado = yy.CHAR;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.CHAR,$$[$0].toString());
                    this.$ = operacion;
                
break;
case 165:

                    operacion = new Object();
                    operacion.tipoResultado = yy.STRING;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.STRING,$$[$0].toString());
                    this.$ = operacion;
                
break;
case 166:

                    operacion = new Object();
                    operacion.tipoResultado = yy.BOOLEAN;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.BOOLEAN,$$[$0].toString());
                    this.$ = operacion;
                
break;
case 167:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.ID,$$[$0].toString());
                    this.$ = operacion;
                
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3,8:4,6:5,13:6,2:$V2,14:$V3,15:$V4}),{1:[3]},{5:[1,10]},o($V0,$V1,{7:3,8:4,6:5,13:6,4:11,2:$V2,5:[2,3],14:$V3,15:$V4}),{9:[1,12]},o($V5,[2,7]),{16:[1,13],17:[1,14]},o($V5,[2,2]),o($V0,[2,9],{15:[1,15]}),o($V0,[2,10],{14:[1,16]}),{1:[2,1]},{5:[2,4]},o($V6,$V7,{10:17,19:19,20:20,22:21,43:22,11:[1,18],16:$V8,18:$V9,61:$Va}),{17:[1,26]},{18:[1,27]},o($V0,[2,11]),o($V0,[2,12]),{11:[1,28]},o($V5,[2,6]),o($V6,$V7,{19:19,20:20,22:21,43:22,10:29,11:[2,16],16:$V8,18:$V9,61:$Va}),{21:[1,30]},o($Vb,[2,19]),{44:31,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:[1,32]},{18:$Vh},o($V6,[2,57]),o($V6,[2,58]),{18:[1,39]},{9:[2,15]},o($V5,[2,5]),{11:[2,17]},o($Vb,[2,18]),{18:[1,44],45:40,49:42,62:41,64:43,67:45,68:$Vi},{18:[1,48],62:47,64:43,67:45,68:$Vi},o($Vj,[2,41]),o($Vj,[2,42]),o($Vj,[2,43]),o($Vj,[2,44]),o($Vj,[2,45]),{47:[1,49]},{9:[2,14]},{21:[2,46],46:50,47:[1,51]},o($Vb,[2,60]),o($Vk,[2,37],{50:[1,52]}),{9:$Vl,65:53},o($Vm,$Vn,{40:$Vo}),{9:[2,64]},{40:[1,56]},o($Vb,[2,61]),{40:$Vo},{48:[1,57]},{21:[2,35]},{18:[1,59],21:$Vp,35:58,40:$Vq,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{18:$Vx,45:74,49:42},o($Vb,[2,62]),o($Vy,$V7,{23:76,24:78,20:79,25:80,26:81,27:82,28:83,29:84,30:85,31:86,32:87,33:88,43:89,71:92,88:94,97:96,11:[1,77],16:$V8,18:$Vz,34:$VA,36:$VB,61:$Va,75:$VC,84:$VD,87:$VE,91:$VF,99:$VG}),{41:[2,70],44:104,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,66:101,69:102,70:103},{41:[1,105]},{18:[1,106]},{21:[2,47]},o([21,118,119,123,127,128,129,130,131,132,136,137,141,142,143,147],$VH,{37:[1,107]}),o($VI,[2,123]),o($VI,$VJ,{116:108,117:109,118:$VK,119:$VL}),o($VM,$VN,{121:112,122:113,123:$VO}),o($VP,$VQ,{125:115,126:116,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,$VY,{134:123,135:124,136:$VZ,137:$V_}),o($V$,$V01,{139:127,140:128,141:$V11,142:$V21,143:$V31}),o($V41,$V51,{145:132,146:133,147:$V61}),{18:$V71,40:$Vq,114:135,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{18:[1,137],40:[1,139],149:[1,138]},o($V81,[2,162]),o($V81,[2,163]),o($V81,[2,164]),o($V81,[2,165]),o($V81,[2,166]),o($Vk,[2,38]),o($Vm,$Vn),{11:[1,140]},o($V91,[2,72]),o($Vy,$V7,{24:78,20:79,25:80,26:81,27:82,28:83,29:84,30:85,31:86,32:87,33:88,43:89,71:92,88:94,97:96,23:141,11:$Va1,103:$Va1,110:$Va1,113:$Va1,16:$V8,18:$Vz,34:$VA,36:$VB,61:$Va,75:$VC,84:$VD,87:$VE,91:$VF,99:$VG}),{21:[1,142]},{21:[1,143]},o($Vb1,[2,24]),o($Vb1,[2,25]),o($Vb1,[2,26]),o($Vb1,[2,27]),o($Vb1,[2,28]),o($Vb1,[2,29]),o($Vb1,[2,30]),o($Vb1,[2,31]),{44:144,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg},{18:$Vh,37:$Vc1,47:$Vd1,58:146,59:$Ve1,60:$Vf1},{18:$V71,21:$Vp,35:150,40:$Vq,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{9:$Vl,65:151},{40:[2,97],92:152},{9:$Vl,65:153},{9:[2,90],85:154},{9:[1,156],98:155},{37:[1,157]},{40:[2,74],74:158},{40:[2,94],90:159},{40:[1,160]},{41:[1,161]},{41:[2,69]},{41:[2,66],50:[1,162]},{18:[1,163]},{9:[2,65]},{40:[1,164]},{18:[1,165]},o($VI,[2,125]),{18:$V71,40:$Vq,115:166,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vg1,[2,128]),o($Vg1,[2,129]),o($VM,[2,130]),{18:$V71,40:$Vq,120:167,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vg1,[2,133]),o($VP,[2,134]),{18:$V71,40:$Vq,124:168,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vg1,[2,137]),o($Vg1,[2,138]),o($Vg1,[2,139]),o($Vg1,[2,140]),o($Vg1,[2,141]),o($Vg1,[2,142]),o($VX,[2,143]),{18:$V71,40:$Vq,133:169,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vg1,[2,146]),o($Vg1,[2,147]),o($V$,[2,148]),{18:$V71,40:$Vq,138:170,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vg1,[2,151]),o($Vg1,[2,152]),o($Vg1,[2,153]),o($V41,[2,154]),{18:$V71,40:$Vq,144:171,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vg1,[2,157]),{41:[1,172]},o($V81,$VH),o($V81,[2,159]),o($V81,[2,160]),{18:$V71,40:$Vq,114:173,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($V91,[2,71]),o($Vh1,[2,21]),o($Vb1,[2,22]),o($Vb1,[2,23]),{18:$Vx,45:40,49:42},o($Vi1,$Vp,{114:60,115:61,120:62,124:63,133:64,138:65,144:66,57:174,35:175,18:[1,177],40:$Vq,48:[1,176],148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw}),o($Vi1,[2,50]),{18:[1,178]},o($Vi1,[2,55]),o($Vi1,[2,56]),{21:[1,179]},o($Vj1,[2,75],{72:180}),{40:[1,181]},o($Vb1,[2,95],{89:182}),{9:$Vl,65:183},o($Vb1,[2,104]),{11:[1,184],100:185,101:186,102:187,103:$Vk1,110:$Vl1},{38:[1,190]},{40:[1,191]},{40:[1,192]},{18:$V71,35:193,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{9:[2,63]},{44:104,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,69:194,70:103},o([41,50],[2,68]),{18:$V71,35:195,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{40:[1,196]},o($VI,$VJ,{117:109,116:197,118:$VK,119:$VL}),o($VM,$VN,{122:113,121:198,123:$VO}),o($VP,$VQ,{126:116,125:199,127:$VR,128:$VS,129:$VT,130:$VU,131:$VV,132:$VW}),o($VX,$VY,{135:124,134:200,136:$VZ,137:$V_}),o($V$,$V01,{140:128,139:201,141:$V11,142:$V21,143:$V31}),o($V41,$V51,{146:133,145:202,147:$V61}),o($V81,[2,158]),{41:[1,203]},o($Vi1,[2,49]),o($Vi1,[2,52]),{18:[1,204]},o([21,41,118,119,123,127,128,129,130,131,132,136,137,141,142,143,147],$VH,{37:[1,205]}),{40:[1,206]},o($Vb1,[2,32]),o($Vb1,[2,80],{73:207,76:208,77:209,78:210,79:212,81:$Vm1}),o($Vy,$V7,{43:89,93:213,95:214,20:215,25:216,16:$V8,18:$Vz,61:$Va}),o($Vb1,[2,92]),{86:217,87:[2,91]},o($Vb1,[2,106]),{11:[1,218],101:219,110:$Vl1},{11:[1,220]},o($Vn1,[2,110],{102:187,100:221,103:$Vk1}),{109:[2,119],111:222},o([18,40,109,148,149,150,151,152,153],[2,116],{104:223}),{37:[1,224]},{18:$V71,35:225,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{18:$V71,35:226,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{41:[1,227]},{41:[2,67]},{41:[1,228]},{18:$V71,35:229,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($VI,[2,126]),o($VM,[2,131]),o($VP,[2,135]),o($VX,[2,144]),o($V$,[2,149]),o($V41,[2,155]),o($V81,[2,161]),{40:[1,230]},{18:[1,231]},{18:$V71,35:232,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vb1,[2,73]),o($Vb1,[2,77],{79:212,77:233,78:234,81:$Vm1}),o($Vb1,[2,79]),o($Vj1,[2,81]),{9:[2,87],75:[1,236],82:235},{9:$Vl,65:237},{41:[1,238]},{21:[1,239]},{21:[2,100]},{21:[2,101]},{87:[1,240]},o($Vb1,[2,107]),{11:[1,241]},o($Vb1,[2,108]),o($Vn1,[2,111]),{106:242,109:$Vo1},{18:$V71,35:245,40:$Vq,105:244,109:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{39:[1,246],42:[1,247]},{41:[1,248]},{41:[1,249]},{9:[2,105]},{21:[2,36]},{41:[1,250]},{18:$V71,35:251,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{40:[1,252]},{41:[1,253]},o($Vb1,[2,78]),o($Vj1,[2,82]),{9:$Vl,65:254},{40:[1,255]},o($Vj1,[2,84],{80:256}),{9:$Vl,65:257},{18:$V71,21:$Vp,35:258,40:$Vq,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{40:[1,259]},o($Vb1,[2,109]),{11:[2,120],112:260},o($Vy,$V7,{24:78,20:79,25:80,26:81,27:82,28:83,29:84,30:85,31:86,32:87,33:88,43:89,71:92,88:94,97:96,23:261,11:$Vp1,103:$Vp1,110:$Vp1,113:$Vp1,16:$V8,18:$Vz,34:$VA,36:$VB,61:$Va,75:$VC,84:$VD,87:$VE,91:$VF,99:$VG}),{106:262,109:$Vo1},{109:[2,113]},{40:[1,263]},{40:[1,264]},{9:[2,76]},{9:[2,93]},{21:[2,48]},{41:[1,265]},{18:$V71,35:266,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vi1,[2,51]),o($Vb1,[2,88],{83:267}),{18:$V71,35:268,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vj1,[2,83]),o($Vb1,[2,98],{94:269}),{21:[1,270]},{18:$V71,35:271,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{11:[2,118]},o($Vh1,[2,115]),o($Vq1,[2,122],{107:272,113:[1,273]}),{18:$V71,35:274,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},{18:$V71,35:275,40:$Vq,41:$Vp,114:60,115:61,120:62,124:63,133:64,138:65,144:66,148:$Vr,149:$Vs,150:$Vt,151:$Vu,152:$Vv,153:$Vw},o($Vi1,[2,53]),{41:[1,276]},o($Vb1,[2,86]),{41:[1,277]},o($Vb1,[2,96]),{18:[1,280],25:279,41:[2,103],96:278},{41:[1,281]},o($Vq1,[2,117],{108:282}),{21:[1,283]},{41:[1,284]},{41:[1,285]},o($Vi1,[2,54]),{9:[2,85]},{41:[2,99]},{41:[2,102]},{37:$Vc1,47:$Vd1,58:146,59:$Ve1,60:$Vf1},{21:[1,286]},o($Vq1,[2,112]),o($Vq1,[2,121]),{21:[1,287]},{21:[1,288]},o($Vb1,[2,89]),o($Vb1,[2,33]),o($Vb1,[2,34])],
defaultActions: {10:[2,1],11:[2,4],27:[2,15],29:[2,17],39:[2,14],45:[2,64],50:[2,35],58:[2,47],102:[2,69],105:[2,65],161:[2,63],194:[2,67],215:[2,100],216:[2,101],227:[2,105],228:[2,36],245:[2,113],248:[2,76],249:[2,93],250:[2,48],260:[2,118],277:[2,85],278:[2,99],279:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let errores = [];
    //-w-let tablaDeSimbolos = [];
    let tablasDeSimbolos = [];
    //-w-let ambitoActual = [];
    let ids = [];
    let simbolosParametros = [];
    let cadParametros = "";
    let ambitoClase = true;
    let tipoDatoSwtich = "";
    let operacion;

    exports.getErrores = function (){
        return errores;
    }

    exports.reset = function(){
        errores.splice(0, errores.length);
        tablasDeSimbolos.splice(0, tablasDeSimbolos.length);
        let tablaGlobal = [];
        tablasDeSimbolos.push(tablaGlobal);
        ids.splice(0, ids.length);
        simbolosParametros.splice(0, simbolosParametros.length);
        cadParametros = "";
        ambitoClase = true;
        tipoDatoSwtich = "";
    }

    function nuevoAmbito(){
        let nuevaTabla = [];
        if(tablasDeSimbolos.length){
            nuevaTabla = tablasDeSimbolos.at(-1).slice();
        }
        tablasDeSimbolos.push(nuevaTabla);
    }

    function getAmbitoActual(){
        return tablasDeSimbolos.at(-1);
    }

    function cerrarAmbito(){
        tablasDeSimbolos.pop();
    }

    function errorSemantico(descripcion,linea,columna){
        let ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'Sem√°ntico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        try{
            if($2!=null){
                //Analizar tipo de resultado
                let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                if(tipoResultado!=null){
                    operacion = new Object();
                    operacion.tipoResultado = tipoResultado;
                    operacion.operacionPendiente = $1;

                    operacion.instruccion = yy.nuevaOperacion($1.instruccion,$2.instruccion,$2.operacionPendiente,null);

                    return operacion;
                }else{
                    errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                    return null;
                }
            }else{
                return $1;
            }
        }catch(error){
            return null;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        try{
            if($3==null){
                operacion = new Object();
                operacion.tipoResultado = $2.tipoResultado;
                operacion.operacionPendiente = $1;

                operacion.instruccion = $2.instruccion;

                return operacion;
            }else{
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$3.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;

                        operacion.instruccion = yy.nuevaOperacion($2.instruccion,$3.instruccion,$3.operacionPendiente,null);

                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$3.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }
        }catch(error){
            return null;
        }
    }

    function existeSimbolo(id,rol){
        for(let simbolo in getAmbitoActual()){
            if(getAmbitoActual()[simbolo].rol==rol && getAmbitoActual()[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function existeClase(id,yy){
        //-w-for(let simbolo in tablaDeSimbolos){
        for(let simbolo in getAmbitoActual()){
            //-w-if(tablaDeSimbolos[simbolo].rol==yy.CLASE && tablaDeSimbolos[simbolo].id==id){
            if(getAmbitoActual()[simbolo].rol==yy.CLASE && getAmbitoActual()[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function obtenerSimbolo(id){
        for (let i=getAmbitoActual().length - 1; i >= 0; i--) {
            if(id==getAmbitoActual()[i].id){
                return getAmbitoActual()[i];
            }
        }
        return null;
    }

    function obtenerUltimoMetodo(yy){
        console.log(tablasDeSimbolos);
        for (let i=getAmbitoActual().length - 1; i >= 0; i--) {
            if(getAmbitoActual()[i].rol == yy.METODO){
                return getAmbitoActual()[i];
            }
        }
        return null;
    }

    function agregarSimbolo(id,tipo,ambito,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = ambito;
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        //-w-tablaDeSimbolos.push(simboloNuevo);
        getAmbitoActual().push(simboloNuevo);
    }

    function agregarSimboloParametro(id,tipo,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = "";
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        simbolosParametros.push(simboloNuevo);
    }

    function pushSimbolosParametros(){
        while(simbolosParametros.length>0){
            //-w-tablaDeSimbolos.push(simbolosParametros.pop());
            getAmbitoActual().push(simbolosParametros.pop());
            //-w-tablaDeSimbolos.at(-1).ambito = ambitoActual.at(-1);
        }
    }

    function validarVariable(id,yy){
        //-w-let tabla = tablaDeSimbolos.slice();
        let tabla = getAmbitoActual().slice();
        while(tabla.length>0){
            let sim = tabla.pop();
            if((sim.rol==yy.VARIABLE || sim.rol==yy.PARAMETRO || sim.rol==yy.OBJECT) && sim.id==id){

                return sim;
            }
        }
        return null;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*ignorar*/
break;
case 1: /*ignorar comentario de linea*/
break;
case 2: /*ignorar comentario de bloque*/
break;
case 3:return 151
break;
case 4:return 150
break;
case 5:return 149
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 153; 
break;
case 7: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 152; 
break;
case 8:return 16
break;
case 9:return 61
break;
case 10:return 'PR_FINAL'
break;
case 11:return 17
break;
case 12:return 63
break;
case 13:return 52
break;
case 14:return 53
break;
case 15:return 54
break;
case 16:return 56
break;
case 17:return 55
break;
case 18:return 68
break;
case 19:return 'PR_IMPORT'
break;
case 20:return 14
break;
case 21:return 15
break;
case 22:return 48
break;
case 23:return 75
break;
case 24:return 81
break;
case 25:return 91
break;
case 26:return 99
break;
case 27:return 103
break;
case 28:return 84
break;
case 29:return 87
break;
case 30:return 110
break;
case 31:return 113
break;
case 32:return "PR_SYSTEM"
break;
case 33:return "PR_OUT"
break;
case 34:return 42
break;
case 35:return 39
break;
case 36:return 'PR_THIS'
break;
case 37:return 34
break;
case 38:return 59
break;
case 39:return 60
break;
case 40:return 136
break;
case 41:return 137
break;
case 42:return 141
break;
case 43:return 142
break;
case 44:return 143
break;
case 45:return 147
break;
case 46:return 9
break;
case 47:return 11
break;
case 48:return 'CORCH_A'
break;
case 49:return 'CORCH_C'
break;
case 50:return 40
break;
case 51:return 41
break;
case 52:return 119
break;
case 53:return 118
break;
case 54:return 123
break;
case 55:return 127
break;
case 56:return 128
break;
case 57:return 131
break;
case 58:return 132
break;
case 59:return 129
break;
case 60:return 130
break;
case 61:return 148
break;
case 62:return 21
break;
case 63:return 109
break;
case 64:return 50
break;
case 65:return 47
break;
case 66:return 37
break;
case 67:return 18
break;
case 68:return 5
break;
case 69:/*Instertar codigo para recuperar el error lexico*/
            //error
            let ErrorLS = new Object();
            ErrorLS.lexema = yy_.yytext;
            ErrorLS.linea = yy_.yylloc.first_line;
            ErrorLS.columna = yy_.yylloc.first_column;
            ErrorLS.tipo = 'L√©xico';
            ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es v√°lido.';
            errores.push(ErrorLS);
    
break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:"[^"]*")/,/^(?:'.')/,/^(?:public\b)/,/^(?:private\b)/,/^(?:final\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:main\b)/,/^(?:import\b)/,/^(?:@Getter\b)/,/^(?:@Setter\b)/,/^(?:new\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:this\b)/,/^(?:return\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:\.)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Java;
exports.Parser = Java.Parser;
exports.parse = function () { return Java.parse.apply(Java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}