/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,6],$V2=[1,7],$V3=[2,5,12,13],$V4=[40,41,42,43,44,52],$V5=[2,44],$V6=[1,20],$V7=[1,21],$V8=[11,12,40,41,42,43,44,50,52],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,40],$Vf=[14,21],$Vg=[17,45],$Vh=[1,47],$Vi=[17,39,45],$Vj=[2,30],$Vk=[1,48],$Vl=[1,65],$Vm=[1,58],$Vn=[1,59],$Vo=[1,64],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,67],$Vu=[40,41,42,43,44],$Vv=[1,81],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,85],$VA=[1,90],$VB=[1,83],$VC=[1,91],$VD=[17,23,98],$VE=[2,112],$VF=[1,99],$VG=[1,100],$VH=[17,23,98,107,108],$VI=[2,117],$VJ=[1,103],$VK=[17,23,98,107,108,112],$VL=[2,121],$VM=[1,106],$VN=[1,107],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[17,23,98,107,108,112,116,117,118,119,120,121],$VT=[2,130],$VU=[1,114],$VV=[1,115],$VW=[17,23,98,107,108,112,116,117,118,119,120,121,125,126],$VX=[2,135],$VY=[1,118],$VZ=[1,119],$V_=[1,120],$V$=[17,23,98,107,108,112,116,117,118,119,120,121,125,126,130,131,132],$V01=[2,141],$V11=[1,123],$V21=[17,23,98,107,108,112,116,117,118,119,120,121,125,126,130,131,132,136],$V31=[11,12,14,40,41,42,43,44,50,52,58,59,64,70,73,76,80,88,92,99,102],$V41=[2,16],$V51=[11,12,14,40,41,42,43,44,50,58,59,64,73,76,80,88,92,99,102],$V61=[14,22,137,138,139,140,141,142],$V71=[11,92,99,102],$V81=[17,23],$V91=[11,12,14,40,41,42,43,44,50,58,59,64,70,73,76,80,88,92,99,102],$Va1=[1,169],$Vb1=[1,168],$Vc1=[1,187],$Vd1=[11,99],$Ve1=[1,215],$Vf1=[2,100],$Vg1=[11,92,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicial":3,"a1":4,"EOF":5,"err":6,"declaracion_clase":7,"declaracion_clase_p":8,"LLAVE_A":9,"instrucciones_clase":10,"LLAVE_C":11,"PR_PUBLIC":12,"PR_CLASS":13,"ID":14,"instrucciones_clase_p":15,"declaracion_variable":16,"PUNTO_Y_COMA":17,"declaracion_metodo":18,"metodo_principal":19,"metodo_principal_p":20,"PR_MAIN":21,"PARENT_A":22,"PARENT_C":23,"instrucciones_metodo":24,"instrucciones_metodo_p":25,"asignacion_variable":26,"instruccion_if":27,"ciclo_for":28,"ciclo_while":29,"ciclo_do_while":30,"instruccion_switch":31,"instruccion_print":32,"instruccion_println":33,"visibilidad":34,"tipo":35,"ids":36,"asignacion":37,"ids_p":38,"COMA":39,"PR_INT":40,"PR_DOUBLE":41,"PR_CHAR":42,"PR_STRING":43,"PR_BOOLEAN":44,"ASIGNACION":45,"expresion_multiple":46,"inc_dec":47,"INCREMENTO":48,"DECREMENTO":49,"PR_PRIVATE":50,"declaracion_metodo_p":51,"PR_VOID":52,"declaracion_metodo_p_a":53,"llill":54,"parametros_b_p":55,"parametros":56,"parametros_p":57,"PR_PRINT":58,"PR_PRINTLN":59,"instruccion_if_b_p":60,"fin_if":61,"instruccion_if_p":62,"inicio_if":63,"PR_IF":64,"instrucciones_else_if":65,"instruccion_else":66,"instruccion_else_if":67,"instruccion_else_if_b_p":68,"fin_else_if":69,"PR_ELSE":70,"inicio_else":71,"fin_else":72,"PR_DO":73,"inicio_do":74,"fin_do":75,"PR_WHILE":76,"parte_while":77,"fin_while":78,"inicio_while":79,"PR_FOR":80,"inicio_for":81,"ciclo_for_p":82,"fin_for":83,"primera_exp":84,"accion_posterior":85,"inicio_switch":86,"instruccion_switch_c_p":87,"PR_SWITCH":88,"instruccion_switch_t_p":89,"instruccion_switch_default":90,"instruccion_switch_b_p":91,"PR_CASE":92,"inicio_cas_sw":93,"case_p":94,"case_ins":95,"instruccion_break":96,"fin_cas_sw":97,"DOS_PUNTOS":98,"PR_DEFAULT":99,"inicio_def_sw":100,"fin_def_sw":101,"PR_BREAK":102,"a3":103,"b3":104,"a3p":105,"a3bp":106,"OR":107,"XOR":108,"c3":109,"b3p":110,"b3bp":111,"AND":112,"d3":113,"c3p":114,"c3bp":115,"IGUAL":116,"NO_IGUAL":117,"MAYOR":118,"MENOR":119,"MAYOR_IGUAL":120,"MENOR_IGUAL":121,"e3":122,"d3p":123,"d3bp":124,"SUMA":125,"RESTA":126,"f3":127,"e3p":128,"e3bp":129,"MULTIPLICACION":130,"DIVISION":131,"MODULO":132,"g3":133,"f3p":134,"f3bp":135,"POTENCIA":136,"NOT":137,"BOOLEAN":138,"INT":139,"DOUBLE":140,"CHAR":141,"STRING":142,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"LLAVE_A",11:"LLAVE_C",12:"PR_PUBLIC",13:"PR_CLASS",14:"ID",17:"PUNTO_Y_COMA",21:"PR_MAIN",22:"PARENT_A",23:"PARENT_C",39:"COMA",40:"PR_INT",41:"PR_DOUBLE",42:"PR_CHAR",43:"PR_STRING",44:"PR_BOOLEAN",45:"ASIGNACION",48:"INCREMENTO",49:"DECREMENTO",50:"PR_PRIVATE",52:"PR_VOID",58:"PR_PRINT",59:"PR_PRINTLN",64:"PR_IF",70:"PR_ELSE",73:"PR_DO",76:"PR_WHILE",80:"PR_FOR",88:"PR_SWITCH",92:"PR_CASE",98:"DOS_PUNTOS",99:"PR_DEFAULT",102:"PR_BREAK",107:"OR",108:"XOR",112:"AND",116:"IGUAL",117:"NO_IGUAL",118:"MAYOR",119:"MENOR",120:"MAYOR_IGUAL",121:"MENOR_IGUAL",125:"SUMA",126:"RESTA",130:"MULTIPLICACION",131:"DIVISION",132:"MODULO",136:"POTENCIA",137:"NOT",138:"BOOLEAN",139:"INT",140:"DOUBLE",141:"CHAR",142:"STRING"},
productions_: [0,[3,2],[6,1],[4,1],[4,2],[7,4],[7,3],[7,1],[8,3],[8,2],[10,1],[10,2],[15,2],[15,1],[19,1],[20,3],[24,1],[24,2],[25,2],[25,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[16,4],[36,1],[36,3],[38,1],[35,1],[35,1],[35,1],[35,1],[35,1],[37,0],[37,2],[26,3],[26,2],[47,1],[47,1],[34,1],[34,1],[34,0],[18,3],[18,3],[51,2],[53,4],[53,1],[56,1],[56,3],[57,2],[55,1],[55,0],[32,5],[33,5],[54,3],[54,2],[27,4],[63,0],[61,0],[60,5],[62,1],[62,2],[62,1],[62,0],[65,1],[65,2],[67,3],[69,0],[68,5],[66,4],[71,0],[72,0],[30,9],[74,0],[75,0],[29,3],[77,5],[79,0],[78,0],[28,7],[81,0],[83,0],[82,5],[84,1],[84,1],[85,1],[85,0],[31,2],[86,4],[87,2],[87,3],[87,3],[87,4],[89,1],[89,2],[91,6],[94,1],[95,1],[95,2],[93,0],[97,0],[90,4],[100,0],[101,0],[96,2],[96,0],[46,1],[103,2],[105,3],[105,0],[106,1],[106,1],[104,2],[110,3],[110,0],[111,1],[109,2],[114,3],[114,0],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[113,2],[123,3],[123,0],[124,1],[124,1],[122,2],[128,3],[128,0],[129,1],[129,1],[129,1],[127,2],[134,3],[134,0],[135,1],[133,3],[133,2],[133,2],[133,4],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                        for(const simbolo in getAmbitoActual()){
                            console.log("-----------------");
                            /*-w-console.log("Id: "+tablaDeSimbolos[simbolo].id);
                            console.log("Tipo: "+tablaDeSimbolos[simbolo].tipo);
                            console.log("Ambito: "+tablaDeSimbolos[simbolo].ambito);
                            console.log("Visibilidad: "+tablaDeSimbolos[simbolo].visibilidad);
                            console.log("Rol: "+tablaDeSimbolos[simbolo].rol);*/
                            console.log("Id: "+getAmbitoActual()[simbolo].id);
                            console.log("Tipo: "+getAmbitoActual()[simbolo].tipo);
                            console.log("Ambito: "+getAmbitoActual()[simbolo].ambito);
                            console.log("Visibilidad: "+getAmbitoActual()[simbolo].visibilidad);
                            console.log("Rol: "+getAmbitoActual()[simbolo].rol);
                        }

break;
case 2:

            //error
            let ErrorLS = new Object();
            ErrorLS.lexema = yytext;
            ErrorLS.linea = this._$.first_line;
            ErrorLS.columna = this._$.first_column;
            ErrorLS.tipo = 'Sint√°ctico';
            ErrorLS.descripcion = '';
            errores.push(ErrorLS);

break;
case 5: case 6:

        //-w-ambitoActual.pop();
        cerrarAmbito();
        yy.PILA_INS.sacar();

break;
case 8:

            if(existeClase($$[$0],yy)){
                errorSemantico("La clase "+$$[$0]+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
            }
            agregarSimbolo($$[$0],"","",yy.PUBLIC,yy.CLASE);
            nuevoAmbito();
            yy.PILA_INS.apilar(yy.nuevaClase($$[$0].toString()));

break;
case 9:

            if(existeClase($$[$01],yy)){
                errorSemantico("La clase "+$$[$01]+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
            }
            agregarSimbolo($$[$01],"","",yy.PUBLIC,yy.CLASE);
            nuevoAmbito();
            yy.PILA_INS.apilar(yy.nuevaClase($$[$01].toString()));

break;
case 12: case 18: case 19:
 yy.PILA_INS.apilar($$[$0-1]);
break;
case 14:

        cerrarAmbito();
        ambitoClase = true;
        yy.PILA_INS.sacar();

break;
case 15:

        //nuevoAmbito();
        //yy.PILA_INS.apilar(yy.nuevoMetodo($$[$0-1].toString()));

        if(existeSimbolo($$[$0-2]+cadParametros,yy.METODO)){
            //-w-errorSemantico("El m√©todo "+$$[$0-2]+cadParametros+" ya ha sido declarado en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
            errorSemantico("El m√©todo "+$$[$0-2]+cadParametros+" ya ha sido declarado.",this._$.first_line,this._$.first_column);
        }
        //-w-agregarSimbolo(ambitoActual.at(-1)+"_"+$$[$0-2]+cadParametros,"",ambitoActual.at(-1),"",yy.METODO);
        agregarSimbolo($$[$0-2]+cadParametros,"","","",yy.METODO);
        nuevoAmbito();

        yy.PILA_INS.apilar(yy.nuevoMetodo($$[$0-2]+cadParametros));

        //-w-ambitoActual.push(ambitoActual.at(-1)+"_"+$$[$0-2]+cadParametros);
        ambitoClase = false;
        cadParametros = "";
        pushSimbolosParametros();

break;
case 27:

            if($$[$0-3] != yy.DEFAULT){
                if(!ambitoClase){
                    errorSemantico("Ilegal inicio de expresi√≥n: "+$$[$0-3]+".",this._$.first_line,this._$.first_column);
                }
            }
            //declaracion y asignacion
            if($$[$0]==null || $$[$0-2] == $$[$0].tipoResultado){
                while(ids.length>0){
                    //asignacion de tipo correcta
                    let id = ids.pop();
                    //-w-if(existeSimbolo(id,ambitoActual.at(-1),yy.VARIABLE)){
                    if(existeSimbolo(id,yy.VARIABLE)){
                        errorSemantico("La variable "+id+" ya ha sido declarada.",this._$.first_line,this._$.first_column);
                    }else{
                        if($$[$0] != null){
                            //simboloVariable.valor = $$[$0].valor;
                            this.$ = yy.nuevaDeclaracion(id,$$[$0].instruccion);
                        }
                        //-w-agregarSimbolo(id,$$[$0-2],ambitoActual.at(-1),$$[$0-3],yy.VARIABLE);
                        agregarSimbolo(id,$$[$0-2],"",$$[$0-3],yy.VARIABLE);
                    }
                }
            }else{
                errorSemantico("Tipo de dato requerido : "+$$[$0-2]+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

break;
case 30:
 ids.push($$[$0]);
break;
case 31:
 this.$ = yy.INT;
break;
case 32:
 this.$ = yy.DOUBLE;
break;
case 33:
 this.$ = yy.CHAR;
break;
case 34:
 this.$ = yy.STRING;
break;
case 35:
 this.$ = yy.BOOLEAN;
break;
case 36: case 89: case 112: case 117: case 121: case 130: case 135: case 141:
 this.$ = null;
break;
case 37: case 86: case 87: case 88: case 109:
 this.$ = $$[$0];
break;
case 38:

        //validando id
        let simId = validarVariable($$[$0-2],yy);
        if(simId==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0-2]+" .",this._$.first_line,this._$.first_column);
        }else{
            if(simId.tipo == $$[$0].tipoResultado){
                //asignacion exitosa;
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                this.$ = yy.nuevaAsignacion($$[$0-2].toString(),$$[$0].instruccion);
            }else{
                errorSemantico("Tipo de dato requerido : "+simId.tipo+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }

break;
case 39:

        let simId_a = validarVariable($$[$0-1],yy);
        if(simId_a==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0-1]+" .",this._$.first_line,this._$.first_column);
        }else{
            if(simId_a.tipo == yy.INT || simId_a.tipo == yy.DOUBLE){
                //asignacion exitosa;
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                //++++++++++++++++++++++++AGREGAR EN CUADRUPLA++++++++++++++++++++++++
                this.$ = yy.nuevoIncDec($$[$0-1].toString(),$$[$0]);
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.DOUBLE+" . Obtenido: "+simId_a.tipo+" .",this._$.first_line,this._$.first_column);
            }
        }

break;
case 40: case 131:
 this.$ = yy.SUMA;
break;
case 41: case 132:
 this.$ = yy.RESTA;
break;
case 42:
 this.$ = yy.PUBLIC;
break;
case 43:
 this.$ = yy.PRIVATE;
break;
case 44:
 this.$ = yy.DEFAULT;
break;
case 45:

        let ultimoMetodoDeclarado = obtenerUltimoMetodo(yy);
        ultimoMetodoDeclarado.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado.tipo = $$[$0-1];

break;
case 46:

        let ultimoMetodoDeclarado1 = obtenerUltimoMetodo(yy);
        if(ultimoMetodoDeclarado1) {
          ultimoMetodoDeclarado1.visibilidad = $$[$0-2];
        ultimoMetodoDeclarado1.tipo = $$[$0-1];
        }

break;
case 47:

        //-w-ambitoActual.pop();
        cerrarAmbito();
        ambitoClase = true;
        yy.PILA_INS.sacar();

break;
case 48:

        //-w-if(existeSimbolo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,ambitoActual.at(-1),yy.METODO)){
        if(existeSimbolo($$[$0-3]+cadParametros,yy.METODO)){
            //-w-errorSemantico("El m√©todo "+$$[$0-3]+cadParametros+" ya ha sido declarado en "+ambitoActual.at(-1)+".",this._$.first_line,this._$.first_column);
            errorSemantico("El m√©todo "+$$[$0-3]+cadParametros+" ya ha sido declarado.",this._$.first_line,this._$.first_column);
        }
        //-w-agregarSimbolo(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros,"",ambitoActual.at(-1),"",yy.METODO);
        agregarSimbolo($$[$0-3]+cadParametros,"","","",yy.METODO);
        nuevoAmbito();

        yy.PILA_INS.apilar(yy.nuevoMetodo($$[$0-3]+cadParametros));

        //-w-ambitoActual.push(ambitoActual.at(-1)+"_"+$$[$0-3]+cadParametros);
        ambitoClase = false;
        cadParametros = "";
        pushSimbolosParametros();

break;
case 52:

        cadParametros+="_"+$$[$0-1];
        if(simbolosParametros.some(w => w.id === $$[$0])){
            errorSemantico("La variable "+$$[$0]+" ya ha sido definida como par√°metro.",this._$.first_line,this._$.first_column);
        }else{
            agregarSimboloParametro($$[$0],$$[$0-1],yy.PRIVATE,yy.PARAMETRO);
        }

break;
case 55: case 56: case 82: case 98:



break;
case 59: case 90:

        yy.PILA_INS.sacar();

break;
case 60: case 80: case 83: case 102:
 nuevoAmbito();
break;
case 61: case 77:
 cerrarAmbito();
break;
case 62:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.apilar(yy.nuevoIf($$[$0-1].instruccion));
        }catch(exception){
        }

break;
case 70: case 74: case 81: case 84: case 103: case 106:

        cerrarAmbito();
        yy.PILA_INS.sacar();

break;
case 71:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoElseIf($$[$0-1].instruccion));
        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }
        }catch(exception){
        }

break;
case 73:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoElse());

break;
case 75:

        try{
            if($$[$0].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.sacarDoWhile($$[$0-2].instruccion);
        }catch(exception){
        }

break;
case 76:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoDoWhile(null));

break;
case 79:

        try{
            if($$[$0-1].tipoResultado!=yy.BOOLEAN){
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.apilar(yy.nuevoWhile($$[$0-1].instruccion));
        }catch(exception){
        }

break;
case 85:

        try{
            if($$[$0-2].tipoResultado!=yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-2].tipoResultado+" .",this._$.first_line,this._$.first_column);
            }

            yy.PILA_INS.apilar(yy.nuevoFor($$[$0-4],$$[$0-2].instruccion,$$[$0]));
        }catch(e){
        }

break;
case 91:

        if($$[$0-1].tipoResultado == yy.DOUBLE || $$[$0-1].tipoResultado == yy.BOOLEAN){
            errorSemantico("Tipo de dato requerido : "+yy.INT+","+yy.CHAR+","+yy.STRING+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }
        tipoDatoSwtich = $$[$0-1].tipoResultado;
        yy.PILA_INS.apilar(yy.nuevoSwitch($$[$0-1].instruccion));

break;
case 99:

        if($$[$0].tipoResultado != tipoDatoSwtich){
            errorSemantico("Tipo de dato requerido : "+tipoDatoSwtich+" . Obtenido: "+$$[$0].tipoResultado+" .",this._$.first_line,this._$.first_column);
        }

        yy.PILA_INS.apilar(yy.nuevoCase($$[$0].instruccion));

break;
case 105:

        nuevoAmbito();
        yy.PILA_INS.apilar(yy.nuevoDefault());

break;
case 110: case 115: case 119: case 128: case 133: case 139:

                this.$ = produccion(yy,$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);

break;
case 111: case 116: case 120: case 129: case 134: case 140:

                        this.$ = produccionPrima(yy,$$[$0-2],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column);

break;
case 113:
 this.$ = yy.OR;
break;
case 114:
 this.$ = yy.XOR;
break;
case 118:
 this.$ = yy.AND;
break;
case 122:
 this.$ = yy.IGUAL;
break;
case 123:
 this.$ = yy.NO_IGUAL;
break;
case 124:
 this.$ = yy.MAYOR;
break;
case 125:
 this.$ = yy.MENOR;
break;
case 126:
 this.$ = yy.MAYOR_IGUAL;
break;
case 127:
 this.$ = yy.MENOR_IGUAL;
break;
case 136:
 this.$ = yy.MULTIPLICACION;
break;
case 137:
 this.$ = yy.DIVISION;
break;
case 138:
 this.$ = yy.MODULO;
break;
case 142:
 this.$ = yy.POTENCIA;
break;
case 143:
 this.$ = $$[$0-1];
break;
case 144:

        let simbolo = obtenerSimbolo($$[$0]);
        if(simbolo==null){
            errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
            this.$ = null;
        }else{
            if(simbolo.tipo==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+simbolo.tipo+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }

break;
case 145:

        operacion = new Object();
        operacion.tipoResultado = yy.BOOLEAN;
        this.$ = operacion;

break;
case 146:

        if($$[$0-1]==null){
            this.$ = null;
        }else{
            if($$[$0-1].tipoResultado==yy.BOOLEAN){
                operacion = new Object();
                operacion.tipoResultado = yy.BOOLEAN;
                this.$ = operacion;
            }else{
                errorSemantico("Tipo de dato requerido : "+yy.BOOLEAN+" . Obtenido: "+$$[$0-1].tipoResultado+" .",this._$.first_line,this._$.first_column);
                this.$ = null;
            }
        }

break;
case 147:

                    var operacion = new Object();
                    operacion.tipoResultado = yy.INT;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.INT,$$[$0].toString());
                    this.$ = operacion;

break;
case 148:

                    operacion = new Object();
                    operacion.tipoResultado = yy.DOUBLE;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.DOUBLE,$$[$0].toString());
                    this.$ = operacion;

break;
case 149:

                    operacion = new Object();
                    operacion.tipoResultado = yy.CHAR;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.CHAR,$$[$0].toString());
                    this.$ = operacion;

break;
case 150:

                    operacion = new Object();
                    operacion.tipoResultado = yy.STRING;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.STRING,$$[$0].toString());
                    this.$ = operacion;

break;
case 151:

                    operacion = new Object();
                    operacion.tipoResultado = yy.BOOLEAN;
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.BOOLEAN,$$[$0].toString());
                    this.$ = operacion;

break;
case 152:

                    operacion = new Object();
                    let sim_id_a = validarVariable($$[$0],yy);
                    if(sim_id_a==null){
                        errorSemantico("No se encuentra el s√≠mbolo "+$$[$0]+" .",this._$.first_line,this._$.first_column);
                        operacion.tipoResultado = yy.ID;
                    }else{
                        operacion.tipoResultado = sim_id_a.tipo;
                    }
                    operacion.instruccion = yy.nuevaOperacion(null,null,yy.ID,$$[$0].toString());
                    this.$ = operacion;

break;
}
},
table: [{2:$V0,3:1,4:2,6:5,7:3,8:4,12:$V1,13:$V2},{1:[3]},{5:[1,9]},{2:$V0,4:10,5:[2,3],6:5,7:3,8:4,12:$V1,13:$V2},{9:[1,11]},o($V3,[2,7]),{13:[1,12]},{14:[1,13]},o($V3,[2,2]),{1:[2,1]},{5:[2,4]},o($V4,$V5,{10:14,15:16,16:17,18:18,34:19,11:[1,15],12:$V6,50:$V7}),{14:[1,22]},{9:[2,9]},{11:[1,23]},o($V3,[2,6]),o($V4,$V5,{15:16,16:17,18:18,34:19,10:24,11:[2,10],12:$V6,50:$V7}),{17:[1,25]},o($V8,[2,13]),{35:26,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,52:[1,27]},o($V4,[2,42]),o($V4,[2,43]),{9:[2,8]},o($V3,[2,5]),{11:[2,11]},o($V8,[2,12]),{14:[1,37],19:38,20:39,21:$Ve,36:33,38:35,51:34,53:36},{14:[1,42],19:38,20:39,21:$Ve,51:41,53:36},o($Vf,[2,31]),o($Vf,[2,32]),o($Vf,[2,33]),o($Vf,[2,34]),o($Vf,[2,35]),{17:[2,36],37:43,45:[1,44]},o($V8,[2,45]),o($Vg,[2,28],{39:[1,45]}),{9:$Vh,54:46},o($Vi,$Vj,{22:$Vk}),{9:[2,49]},{9:[2,14]},{22:[1,49]},o($V8,[2,46]),{22:$Vk},{17:[2,27]},{14:$Vl,22:$Vm,46:50,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{14:$Vt,36:66,38:35},o($V8,[2,47]),o($Vu,$V5,{24:68,25:70,16:71,26:72,27:73,28:74,29:75,30:76,31:77,32:78,33:79,34:80,60:82,77:84,86:86,11:[1,69],12:$V6,14:$Vv,50:$V7,58:$Vw,59:$Vx,64:$Vy,73:$Vz,76:$VA,80:$VB,88:$VC}),{23:[2,54],35:95,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,55:92,56:93,57:94},{23:[1,96]},{17:[2,37]},o($VD,[2,109]),o($VD,$VE,{105:97,106:98,107:$VF,108:$VG}),o($VH,$VI,{110:101,111:102,112:$VJ}),o($VK,$VL,{114:104,115:105,116:$VM,117:$VN,118:$VO,119:$VP,120:$VQ,121:$VR}),o($VS,$VT,{123:112,124:113,125:$VU,126:$VV}),o($VW,$VX,{128:116,129:117,130:$VY,131:$VZ,132:$V_}),o($V$,$V01,{134:121,135:122,136:$V11}),{14:$Vl,22:$Vm,103:124,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{14:[1,125],22:[1,127],138:[1,126]},o($V21,[2,147]),o($V21,[2,148]),o($V21,[2,149]),o($V21,[2,150]),o($V21,[2,151]),o($V21,[2,152]),o($Vg,[2,29]),o($Vi,$Vj),{11:[1,128]},o($V31,[2,58]),o($Vu,$V5,{25:70,16:71,26:72,27:73,28:74,29:75,30:76,31:77,32:78,33:79,34:80,60:82,77:84,86:86,24:129,11:$V41,92:$V41,99:$V41,102:$V41,12:$V6,14:$Vv,50:$V7,58:$Vw,59:$Vx,64:$Vy,73:$Vz,76:$VA,80:$VB,88:$VC}),{17:[1,130]},{17:[1,131]},o($V51,[2,20]),o($V51,[2,21]),o($V51,[2,22]),o($V51,[2,23]),o($V51,[2,24]),o($V51,[2,25]),o($V51,[2,26]),{35:132,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd},{45:[1,133],47:134,48:[1,135],49:[1,136]},{9:$Vh,54:137},{22:[2,83],81:138},{9:$Vh,54:139},{9:[2,76],74:140},{9:[1,142],87:141},{22:[1,143]},{22:[1,144]},{22:[2,60],63:145},{22:[2,80],79:146},{22:[1,147]},{23:[1,148]},{23:[2,53]},{23:[2,50],39:[1,149]},{14:[1,150]},{9:[2,15]},o($VD,[2,110]),{14:$Vl,22:$Vm,104:151,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V61,[2,113]),o($V61,[2,114]),o($VH,[2,115]),{14:$Vl,22:$Vm,109:152,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V61,[2,118]),o($VK,[2,119]),{14:$Vl,22:$Vm,113:153,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V61,[2,122]),o($V61,[2,123]),o($V61,[2,124]),o($V61,[2,125]),o($V61,[2,126]),o($V61,[2,127]),o($VS,[2,128]),{14:$Vl,22:$Vm,122:154,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V61,[2,131]),o($V61,[2,132]),o($VW,[2,133]),{14:$Vl,22:$Vm,127:155,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V61,[2,136]),o($V61,[2,137]),o($V61,[2,138]),o($V$,[2,139]),{14:$Vl,22:$Vm,133:156,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V61,[2,142]),{23:[1,157]},o($V21,[2,144]),o($V21,[2,145]),{14:$Vl,22:$Vm,103:158,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V31,[2,57]),o($V71,[2,17]),o($V51,[2,18]),o($V51,[2,19]),{14:$Vt,36:33,38:35},{14:$Vl,22:$Vm,46:159,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V81,[2,39]),o($V81,[2,40]),o($V81,[2,41]),o($V91,[2,61],{61:160}),{22:[1,161]},o($V51,[2,81],{78:162}),{9:$Vh,54:163},o($V51,[2,90]),{11:[1,164],89:165,90:166,91:167,92:$Va1,99:$Vb1},{14:$Vl,22:$Vm,46:170,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{14:$Vl,22:$Vm,46:171,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{22:[1,172]},{22:[1,173]},{14:$Vl,22:$Vm,46:174,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{9:[2,48]},{35:95,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,56:175,57:94},o([23,39],[2,52]),o($VD,$VE,{106:98,105:176,107:$VF,108:$VG}),o($VH,$VI,{111:102,110:177,112:$VJ}),o($VK,$VL,{115:105,114:178,116:$VM,117:$VN,118:$VO,119:$VP,120:$VQ,121:$VR}),o($VS,$VT,{124:113,123:179,125:$VU,126:$VV}),o($VW,$VX,{129:117,128:180,130:$VY,131:$VZ,132:$V_}),o($V$,$V01,{135:122,134:181,136:$V11}),o($V21,[2,143]),{23:[1,182]},o($V81,[2,38]),o($V51,[2,66],{62:183,65:184,66:185,67:186,68:188,70:$Vc1}),o($Vu,$V5,{34:80,82:189,84:190,16:191,26:192,12:$V6,14:$Vv,50:$V7}),o($V51,[2,78]),{75:193,76:[2,77]},o($V51,[2,92]),{11:[1,194],90:195,99:$Vb1},{11:[1,196]},o($Vd1,[2,96],{91:167,89:197,92:$Va1}),{98:[2,105],100:198},o($V61,[2,102],{93:199}),{23:[1,200]},{23:[1,201]},{14:$Vl,22:$Vm,46:202,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{14:$Vl,22:$Vm,46:203,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{23:[1,204]},{23:[2,51]},o($VD,[2,111]),o($VH,[2,116]),o($VK,[2,120]),o($VS,[2,129]),o($VW,[2,134]),o($V$,[2,140]),o($V21,[2,146]),o($V51,[2,59]),o($V51,[2,63],{68:188,66:205,67:206,70:$Vc1}),o($V51,[2,65]),o($V91,[2,67]),{9:[2,73],64:[1,208],71:207},{9:$Vh,54:209},{23:[1,210]},{17:[1,211]},{17:[2,86]},{17:[2,87]},{76:[1,212]},o($V51,[2,93]),{11:[1,213]},o($V51,[2,94]),o($Vd1,[2,97]),{95:214,98:$Ve1},{14:$Vl,22:$Vm,46:217,94:216,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{17:[1,218]},{17:[1,219]},{23:[1,220]},{23:[1,221]},{9:[2,91]},o($V51,[2,64]),o($V91,[2,68]),{9:$Vh,54:222},{22:[1,223]},o($V91,[2,70],{69:224}),{9:$Vh,54:225},{14:$Vl,22:$Vm,46:226,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{22:[1,227]},o($V51,[2,95]),{11:[2,106],101:228},o($Vu,$V5,{25:70,16:71,26:72,27:73,28:74,29:75,30:76,31:77,32:78,33:79,34:80,60:82,77:84,86:86,24:229,11:$Vf1,92:$Vf1,99:$Vf1,102:$Vf1,12:$V6,14:$Vv,50:$V7,58:$Vw,59:$Vx,64:$Vy,73:$Vz,76:$VA,80:$VB,88:$VC}),{95:230,98:$Ve1},{98:[2,99]},o($V51,[2,55]),o($V51,[2,56]),{9:[2,62]},{9:[2,79]},o($V51,[2,74],{72:231}),{14:$Vl,22:$Vm,46:232,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},o($V91,[2,69]),o($V51,[2,84],{83:233}),{17:[1,234]},{14:$Vl,22:$Vm,46:235,103:51,104:52,109:53,113:54,122:55,127:56,133:57,137:$Vn,138:$Vo,139:$Vp,140:$Vq,141:$Vr,142:$Vs},{11:[2,104]},o($V71,[2,101]),o($Vg1,[2,108],{96:236,102:[1,237]}),o($V51,[2,72]),{23:[1,238]},o($V51,[2,82]),{14:$Vv,23:[2,89],26:240,85:239},{23:[1,241]},o($Vg1,[2,103],{97:242}),{17:[1,243]},{9:[2,71]},{23:[2,85]},{23:[2,88]},{17:[1,244]},o($Vg1,[2,98]),o($Vg1,[2,107]),o($V51,[2,75])],
defaultActions: {9:[2,1],10:[2,4],13:[2,9],22:[2,8],24:[2,11],38:[2,49],39:[2,14],43:[2,27],50:[2,37],93:[2,53],96:[2,15],148:[2,48],175:[2,51],191:[2,86],192:[2,87],204:[2,91],217:[2,99],220:[2,62],221:[2,79],228:[2,104],238:[2,71],239:[2,85],240:[2,88]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let errores = [];
    //-w-let tablaDeSimbolos = [];
    let tablasDeSimbolos = [];
    //-w-let ambitoActual = [];
    let ids = [];
    let simbolosParametros = [];
    let cadParametros = "";
    let ambitoClase = true;
    let tipoDatoSwtich = "";

    exports.getErrores = function (){
        return errores;
    }

    exports.reset = function(){
        errores.splice(0, errores.length);
        //-w-tablaDeSimbolos.splice(0, tablaDeSimbolos.length);
        tablasDeSimbolos.splice(0, tablasDeSimbolos.length);
        let tablaGlobal = [];
        tablasDeSimbolos.push(tablaGlobal);
        //-w-ambitoActual.splice(0, ambitoActual.length);
        ids.splice(0, ids.length);
        simbolosParametros.splice(0, simbolosParametros.length);
        cadParametros = "";
        ambitoClase = true;
        tipoDatoSwtich = "";
    }

    function nuevoAmbito(){
        let nuevaTabla = [];
        if(tablasDeSimbolos.length){
            nuevaTabla = tablasDeSimbolos.at(-1).slice();
        }
        tablasDeSimbolos.push(nuevaTabla);
    }

    function getAmbitoActual(){
        return tablasDeSimbolos.at(-1);
    }

    function cerrarAmbito(){
        tablasDeSimbolos.pop();
    }

    function errorSemantico(descripcion,linea,columna){
        let ErrorLS = new Object();
        ErrorLS.lexema = "";
        ErrorLS.linea = linea;
        ErrorLS.columna = columna;
        ErrorLS.tipo = 'Sem√°ntico';
        ErrorLS.descripcion = descripcion;
        errores.push(ErrorLS);
    }

    function produccion(yy,$1,$2,linea,columna){
        try{
            if($2!=null){
                //Analizar tipo de resultado
                let tipoResultado = yy.filtrarOperacion($1.tipoResultado,$2.tipoResultado,$2.operacionPendiente);
                if(tipoResultado!=null){
                    const operacion = new Object();
                    operacion.tipoResultado = tipoResultado;
                    operacion.operacionPendiente = $1;

                    operacion.instruccion = yy.nuevaOperacion($1.instruccion,$2.instruccion,$2.operacionPendiente,null);

                    return operacion;
                }else{
                    errorSemantico("Operandos incorrectos para el operador "+$2.operacionPendiente+" .",linea,columna);
                    return null;
                }
            }else{
                return $1;
            }
        }catch(error){
            return null;
        }
    }

    function produccionPrima(yy,$1,$2,$3,linea,columna){
        try{
            if($3==null){
                const operacion = new Object();
                operacion.tipoResultado = $2.tipoResultado;
                operacion.operacionPendiente = $1;

                operacion.instruccion = $2.instruccion;

                return operacion;
            }else{
                //Analizar tipo de resultado
                if($2!=null){
                    let tipoResultado = yy.filtrarOperacion($2.tipoResultado,$3.tipoResultado,$3.operacionPendiente);
                    if(tipoResultado!=null){
                        operacion = new Object();
                        operacion.tipoResultado = tipoResultado;
                        operacion.operacionPendiente = $1;

                        operacion.instruccion = yy.nuevaOperacion($2.instruccion,$3.instruccion,$3.operacionPendiente,null);

                        return operacion;
                    }else{
                        errorSemantico("Operandos incorrectos para el operador "+$3.operacionPendiente+" .",linea,columna);
                        return null;
                    }
                }else{
                    return null;
                }
            }
        }catch(error){
            return null;
        }
    }

    //-w-function existeSimbolo(id,ambito,rol){
    function existeSimbolo(id,rol){
        //-w-for(let simbolo in tablaDeSimbolos){
        for(let simbolo in getAmbitoActual()){
            //-w-if(tablaDeSimbolos[simbolo].rol==rol && tablaDeSimbolos[simbolo].id==id && ambito==tablaDeSimbolos[simbolo].ambito){
            if(getAmbitoActual()[simbolo].rol==rol && getAmbitoActual()[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function existeClase(id,yy){
        //-w-for(let simbolo in tablaDeSimbolos){
        for(let simbolo in getAmbitoActual()){
            //-w-if(tablaDeSimbolos[simbolo].rol==yy.CLASE && tablaDeSimbolos[simbolo].id==id){
            if(getAmbitoActual()[simbolo].rol==yy.CLASE && getAmbitoActual()[simbolo].id==id){
                return true;
            }
        }
        return false;
    }

    function obtenerSimbolo(id){
        //-w-for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
        //-w-for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
            //-w-if(id==tablaDeSimbolos[i].id){
                //-w-return tablaDeSimbolos[i];
        for (let i=getAmbitoActual().length - 1; i >= 0; i--) {
            if(id==getAmbitoActual()[i].id){
                return getAmbitoActual()[i];
            }
        }
        return null;
    }

    function obtenerUltimoMetodo(yy){
        /*-w-for (let i=tablaDeSimbolos.length - 1; i >= 0; i--) {
            if(tablaDeSimbolos[i].rol == yy.METODO){
                return tablaDeSimbolos[i];
            }
        }*/
        console.log(tablasDeSimbolos);
        for (let i=getAmbitoActual().length - 1; i >= 0; i--) {
            if(getAmbitoActual()[i].rol == yy.METODO){
                return getAmbitoActual()[i];
            }
        }
        return null;
    }

    function agregarSimbolo(id,tipo,ambito,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = ambito;
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        //-w-tablaDeSimbolos.push(simboloNuevo);
        getAmbitoActual().push(simboloNuevo);
    }

    function agregarSimboloParametro(id,tipo,visibilidad,rol){
        let simboloNuevo = new Object();
        simboloNuevo.id = id;
        simboloNuevo.tipo = tipo;
        simboloNuevo.ambito = "";
        simboloNuevo.visibilidad = visibilidad;
        simboloNuevo.rol = rol;
        simbolosParametros.push(simboloNuevo);
    }

    function pushSimbolosParametros(){
        while(simbolosParametros.length>0){
            //-w-tablaDeSimbolos.push(simbolosParametros.pop());
            getAmbitoActual().push(simbolosParametros.pop());
            //-w-tablaDeSimbolos.at(-1).ambito = ambitoActual.at(-1);
        }
    }

    function validarVariable(id,yy){
        //-w-let tabla = tablaDeSimbolos.slice();
        let tabla = getAmbitoActual().slice();
        while(tabla.length>0){
            let sim = tabla.pop();
            if((sim.rol==yy.VARIABLE || sim.rol==yy.PARAMETRO) && sim.id==id){
                /*-w-let ambitos = ambitoActual.slice();
                while(ambitos.length>0){
                    if(sim.ambito==ambitos.pop()){
                        return sim;
                    }
                }*/
                return sim;
            }
        }
        return null;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*ignorar*/
break;
case 1: /*ignorar comentario de linea*/
break;
case 2: /*ignorar comentario de bloque*/
break;
case 3:return 140
break;
case 4:return 139
break;
case 5:return 138
break;
case 6: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 142;
break;
case 7: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 141;
break;
case 8:return 12
break;
case 9:return 50
break;
case 10:return 'PR_FINAL'
break;
case 11:return 13
break;
case 12:return 52
break;
case 13:return 40
break;
case 14:return 41
break;
case 15:return 42
break;
case 16:return 44
break;
case 17:return 43
break;
case 18:return 21
break;
case 19:return 'PR_IMPORT'
break;
case 20:return 'PR_GETTER'
break;
case 21:return 'PR_SETTER'
break;
case 22:return 64
break;
case 23:return 70
break;
case 24:return 80
break;
case 25:return 88
break;
case 26:return 92
break;
case 27:return 73
break;
case 28:return 76
break;
case 29:return 99
break;
case 30:return 102
break;
case 31:return 59
break;
case 32:return 58
break;
case 33:return 48
break;
case 34:return 49
break;
case 35:return 125
break;
case 36:return 126
break;
case 37:return 130
break;
case 38:return 131
break;
case 39:return 132
break;
case 40:return 136
break;
case 41:return 9
break;
case 42:return 11
break;
case 43:return 'CORCH_A'
break;
case 44:return 'CORCH_C'
break;
case 45:return 22
break;
case 46:return 23
break;
case 47:return 108
break;
case 48:return 107
break;
case 49:return 112
break;
case 50:return 116
break;
case 51:return 117
break;
case 52:return 120
break;
case 53:return 121
break;
case 54:return 118
break;
case 55:return 119
break;
case 56:return 137
break;
case 57:return 17
break;
case 58:return 98
break;
case 59:return 39
break;
case 60:return 45
break;
case 61:return 14
break;
case 62:return 5
break;
case 63:/*Instertar codigo para recuperar el error lexico*/
            //error
            let ErrorLS = new Object();
            ErrorLS.lexema = yy_.yytext;
            ErrorLS.linea = yy_.yylloc.first_line;
            ErrorLS.columna = yy_.yylloc.first_column;
            ErrorLS.tipo = 'L√©xico';
            ErrorLS.descripcion = 'El lexema '+yy_.yytext+' no es v√°lido.';
            errores.push(ErrorLS);

break;
}
},
rules: [/^(?:[ \r\t\n]+)/,/^(?:[/][/].*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:"[^"]*")/,/^(?:'.')/,/^(?:public\b)/,/^(?:private\b)/,/^(?:final\b)/,/^(?:class\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:main\b)/,/^(?:import\b)/,/^(?:@Getter\b)/,/^(?:@Setter\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:[+])/,/^(?:[-])/,/^(?:[*])/,/^(?:[/])/,/^(?:[%])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:!)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:[a-zA-Z]+[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Java;
exports.Parser = Java.Parser;
exports.parse = function () { return Java.parse.apply(Java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
